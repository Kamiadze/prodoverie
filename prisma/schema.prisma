// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  phone     String    // Добавляем поле phone
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  pets      Pet[]
}

model Pet {
  id        String    @id @default(cuid())
  name      String
  type      String
  breed     String?
  age       Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id])
  bookings  Booking[]
}

model Booking {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  startDate       DateTime
  endDate         DateTime
  status          String
  notes           String?
  roomType        String
  userId          String
  petId           String
  sharedWithPetId String?   // Добавляем поле sharedWithPetId
  user            User      @relation(fields: [userId], references: [id])
  pet             Pet       @relation(fields: [petId], references: [id])
}

model Room {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  price     Int
  capacity  Int
  available Int
  total     Int      // Убедимся, что поле total существует
  petType   String
}

model Message {
  id          String   @id @default(uuid())
  name        String
  email       String
  subject     String
  message     String
  status      String   @default("unread")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
